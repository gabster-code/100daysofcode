#100 Days of Code Challenge

--------------------------------------------
                 G O A L S 
--------------------------------------------
- Learn Solidity and Smart Contracts (Re-learning) 
- Finish The Freshman to Senior Tracks in LearnWeb3DAO
- Try to code smart Contracts/Dapps
    - Basic NFT Smart Contracts
        - Can also be soulbound/token gate stuff
    - DEX (If possible)
    - Royalty Splitter 
    - Escrow Contract based on Milestones Reached
    - Marketplace? 

--------------------------------------------
      Challenge Start Date: 08/26/2022
--------------------------------------------

Day 1 - 08/26/2022:
Started Freshman Track
- Learned about the Solidity basics
    - Variables
    - Functions
    - Loops
    - Arrays
    - Using remix to create, compile and deploy the smart contracts
- Did the Basic DAPP example code
    - MoodDiary
- Learned about ERC20 Tokens Contract
    - Created LW3 Token on Rinkeby Test Network
- Learned about Basic NFT Contracts using Hardhat and OpenZeppelin
    - Deployed GameItem Contract and Minted an NFT on Rinkeby via Hardhat 
--------------------------------------------

Day 2 - 08/27/2022
Started Sophomore Track
- Learned Basics of React/NextJS
    - UseState
        - asynchronous
    - UseEffect
    - UseRef
        - synchronous
        - can reference DOM
    Resources:
    https://www.youtube.com/watch?v=hQAHSlTtcmY // Learn React In 30 Minutes
    https://www.youtube.com/watch?v=Sklc_fQBmcs // Next.js in 100 Seconds // Plus Full Beginner's Tutorial
    https://scrimba.com/learn/learnreact
    https://www.youtube.com/watch?v=mTz0GXj8NN0 //Next.js Crash Course
- Learned about GAS Fees
    - Pre-London Upgrade
     - gas fees = gas spent * gas price
    - Post-London Upgrade
     - gas fees = gas spent * (base fees + priority fees)

--------------------------------------------

Day 3 and 4 - 08/29/2022
- Learned how ethereum transactions are Mined 
    - User Signs transaction request
    - transaction is broadcasted to the Network
    - transaction gets added to the local mempool of the nodes (mempool = list of trans. not yet included as part of a block)
    - miner groups transation into blocks
        - verifies validity of transaction
        - executes transation on local copy of EVM
        - miner begins process of creating POW certificate
    - after producing POW Certificate, it broadcasts to the Network
    - other nodes verify the certificate, execute all transactions in the block to local EVM and checks if EVM state matches the one proposed by miner
    - once other nodes verified, they add block to the node and accept the new EVM state as the current state of blockchain
    - Each node removes transactions included within the block from their local mempool
    - repeat ðŸ˜Ž
- Learned about Mining types and what proof of work is
    - Ethereum proof-of-work protocol, Ethash
- Learned more about the EVM
    - Merkle Patricia Tries
- Advanced Solidity Topics
        Mappings
        Enums
        Structs
        View and Pure Functions
        Function Modifiers
        Events
        Constructors
        Inheritance
        Transferring ETH
        Calling external contracts
        Import statements
        Solidity Libraries
- Providers and Signers
    - BigNumbers
    - ABI
    - ERC20 Approval Flow


--------------------------------------------

Day 5 and 6 - 08/31/2022

- Built a whitelist Dapp
    - Created Whitelist Contract
    - Added HardHat Gas Reporter
    - Added Test for Whitelist Contract
    











